@use "sass:map";
@use "/assets/scss/utilities/variables/colors";
@use "/assets/scss/utilities/variables/size-values";
@use "/assets/scss/utilities/mixins/button/variants";
@use "/assets/scss/utilities/mixins/reset";

@mixin square($value) {
  min-width: $value;
  max-width: $value;
  min-height: $value;
  max-height: $value;
}

.button {
  @include reset.button;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;

  &--primary {
    @include variants.primary;
  }

  &--light {
    @include variants.light;
  }

  &--ghost {
    @include variants.ghost;
  }

  &--outlined {
    @include variants.outlined;
  }
  &--xs {
    @include square(map.get(size-values.$base, 6));
    padding: map.get(size-values.$base, 2);
    border-radius: map.get(size-values.$radius, "xs");
  }
  &--sm {
    @include square(map.get(size-values.$base, 10));
    padding: map.get(size-values.$base, 3);
    border-radius: map.get(size-values.$radius, "sm");
  }
  &--md {
    @include square(map.get(size-values.$base, 14));
    padding: map.get(size-values.$base, 4);
    border-radius: map.get(size-values.$radius, "md");
  }
  &--lg {
    @include square(map.get(size-values.$base, 20));
    padding: map.get(size-values.$base, 5);
    border-radius: map.get(size-values.$radius, "lg");
  }
  &--xl {
    @include square(map.get(size-values.$base, 26));
    padding: map.get(size-values.$base, 10);
    border-radius: map.get(size-values.$radius, "xl");
  }
  &--round {
    border-radius: map.get(size-values.$radius, "full");
  }

  &__icon {
    width: 100%;
    height: auto;
  }
}
